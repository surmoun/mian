<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Spring篇】模拟网站登录获取Token</title>
      <link href="/posts/2024/undefined.html"/>
      <url>/posts/2024/undefined.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SpringBoot篇】登录校验拦截器设置</title>
      <link href="/posts/2024/639972599.html"/>
      <url>/posts/2024/639972599.html</url>
      
        <content type="html"><![CDATA[<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>后台管理系统中除了登录接口、获取验证码的接口在访问的时候不需要验证用户的登录状态，其余的接口在访问的时候都必须要求用户登录成功以后才可以进行访问。</p><p>登录过程<br><img src="https://s21.ax1x.com/2024/07/16/pkIRPi9.png" alt="拦截器配置过程"></p><p><img src="https://s21.ax1x.com/2024/07/16/pkI2xqU.png" alt="拦截器配置说明"></p><blockquote><p>前端请求url 经过拦截器（放行登录和验证码）进行判断获取到token，从Redis中查询数据是否存在，<br>若数据存在放在ThreadLocal线程变量中，更新redis token存储的时间并放行<br>若不存在返回208状态码 返回前端页面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spzx.common.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spzx.model.entity.system.SysUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthContextUtil</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个ThreadLocal对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SysUser&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;() ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义存储数据的静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(SysUser sysUser)</span> &#123;</span><br><span class="line">        threadLocal.set(sysUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义获取数据的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SysUser <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get() ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除数据的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="拦截器Hander"><a href="#拦截器Hander" class="headerlink" title="拦截器Hander"></a>拦截器Hander</h2><blockquote><p>UserAuthProperties 用于读取yml中的参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spzx.auth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAuthProperties</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt;  noAuthUrls;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginAuthInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate&lt;String , String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取预检请求放行</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;OPTIONS&quot;</span>.equals(method))&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取得token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isEmpty(token))</span><br><span class="line">        &#123;</span><br><span class="line">            responseNoLoginInfo(response) ;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//得到用户json</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userInfoJSON</span> <span class="operator">=</span> redisTemplate.opsForValue().get(CacheConstant.User_Login_Prefix + token);</span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isEmpty(userInfoJSON))</span><br><span class="line">        &#123;</span><br><span class="line">            responseNoLoginInfo(response) ;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//json存到threadLocal</span></span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">sysUser</span> <span class="operator">=</span> JSON.parseObject(userInfoJSON, SysUser.class);</span><br><span class="line">        AuthContextUtil.set(sysUser);</span><br><span class="line">        <span class="comment">//重置redis</span></span><br><span class="line"></span><br><span class="line">        redisTemplate.expire(CacheConstant.User_Login_Prefix + token,<span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">responseNoLoginInfo</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">        Result&lt;Object&gt; result = Result.build(<span class="literal">null</span>, ResultCodeEnum.LOGIN_AUTH);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html; charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writer = response.getWriter();</span><br><span class="line">            writer.print(JSON.toJSONString(result));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (writer != <span class="literal">null</span>) writer.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        AuthContextUtil.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span>  <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    LoginAuthInterceptor loginAuthInterceptor;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserAuthProperties userAuthProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*登录校验</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(loginAuthInterceptor)</span><br><span class="line">                .excludePathPatterns(userAuthProperties.getNoAuthUrls())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*CROS跨域</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)      <span class="comment">// 添加路径规则</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)               <span class="comment">// 是否允许在跨域的情况下传递Cookie</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)           <span class="comment">// 允许请求来源的域规则</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>) ;                <span class="comment">// 允许所有的请求头</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SpringBoot篇】自定义异常处理</title>
      <link href="/posts/2024/2677420933.html"/>
      <url>/posts/2024/2677420933.html</url>
      
        <content type="html"><![CDATA[<h2 id="🎈异常处理"><a href="#🎈异常处理" class="headerlink" title="🎈异常处理"></a>🎈异常处理</h2><p>在 Java 中，自定义异常是指用户根据自己的需求创建的异常类。Java 提供了一些预定义的异常类，如 <strong>NullPointerException</strong>、<strong>ArrayIndexOutOfBoundsException</strong>等，但有时这些预定义的异常类并不能完全满足我们的需求。在这种情况下，我们可以通过创建自定义异常类来表示特定的异常情况。</p><p>自定义异常类通常继承自 Exception 类或 RuntimeException 类，以及它们的子类，并根据需要添加相应的构造方法和其他方法以满足特定的异常处理需求，自定义异常类可以包含额外的属性和方法，以提供更多的信息和功能。</p><p>使用自定义异常类时，通常的做法是在方法中使用 throw 语句来抛出自定义异常，然后在调用该方法的地方使用 try-catch 语句块来捕获并处理异常。</p><p><img src="https://s21.ax1x.com/2024/07/16/pkI2JUJ.png" alt="异常类"></p><blockquote><p>我们想让异常结果也显示为统一的返回结果对象，并且统一处理系统的异常信息，那么，需要统一异常处理</p></blockquote><h2 id="🎆统一异常处理器"><a href="#🎆统一异常处理器" class="headerlink" title="🎆统一异常处理器"></a>🎆统一异常处理器</h2><blockquote><p>@ExceptionHandler(Exception.class)<br>@ControllerAdvice</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一异常处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHander</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">error</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span>  Result.build(<span class="literal">null</span>,<span class="number">201</span>,<span class="string">&quot;出现了异常&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 特定的异常处理</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">error</span><span class="params">(ArithmeticException e)</span>&#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">       <span class="keyword">return</span>  Result.build(<span class="literal">null</span>,<span class="number">202</span>,<span class="string">&quot;特定的异常&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="🎀自定义异常"><a href="#🎀自定义异常" class="headerlink" title="🎀自定义异常"></a>🎀自定义异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GuiguException</span>  <span class="keyword">extends</span>  <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer CODE;</span><br><span class="line">    <span class="keyword">private</span> String  message;</span><br><span class="line">    <span class="keyword">private</span> ResultCodeEnum resultCodeEnum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GuiguException</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GuiguException</span><span class="params">(Integer CODE, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.CODE = CODE;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GuiguException</span><span class="params">(ResultCodeEnum resultCodeEnum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.CODE = resultCodeEnum.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = resultCodeEnum.getMessage();</span><br><span class="line">        <span class="built_in">this</span>.resultCodeEnum = resultCodeEnum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(GuiguException.class)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">error</span><span class="params">(GuiguException e)</span></span><br><span class="line">&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> Result.build(<span class="literal">null</span>,e.getCODE(),e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SpringBoot篇】阿里云OSS--文件存储</title>
      <link href="/posts/2024/2973527109.html"/>
      <url>/posts/2024/2973527109.html</url>
      
        <content type="html"><![CDATA[<h2 id="🌹什么是阿里云OSS"><a href="#🌹什么是阿里云OSS" class="headerlink" title="🌹什么是阿里云OSS"></a>🌹什么是阿里云OSS</h2><p>阿里云对象存储（Alibaba Cloud Object Storage Service，简称OSS）是阿里云提供的海量、安全、低成本、高可靠的云存储服务。用户可以通过简单的API接口在任何时间、任何地点上传和下载数据，适用于图像、音视频、文档、网站等各种类型的数据存储和分发场景。</p><h2 id="⭐阿里云OSS的优点"><a href="#⭐阿里云OSS的优点" class="headerlink" title="⭐阿里云OSS的优点"></a>⭐阿里云OSS的优点</h2><p><strong>高可靠性</strong>：OSS采用了多副本存储和容灾备份机制，确保数据的高可靠性和持久性。<br><strong>安全性</strong>：支持多种安全策略，如访问控制、加密传输等，保障数据的安全性。<br><strong>弹性扩展</strong>：支持按需存储和弹性扩展，用户可以根据实际需求灵活调整存储容量。<br><strong>低成本</strong>：OSS的存储费用低廉，且支持按量付费模式，使用户能够根据实际使用量付费</p><h2 id="🏳️‍🌈为什么要使用云服务OSS"><a href="#🏳️‍🌈为什么要使用云服务OSS" class="headerlink" title="🏳️‍🌈为什么要使用云服务OSS"></a>🏳️‍🌈为什么要使用云服务OSS</h2><p>解决本地存储无法直接访问，本地磁盘空间有限，本地磁盘损坏这3个问题</p><h2 id="🎄使用步骤"><a href="#🎄使用步骤" class="headerlink" title="🎄使用步骤"></a>🎄使用步骤</h2><p><img src="https://img2024.cnblogs.com/blog/1931734/202406/1931734-20240604073206273-1833203380.png" alt="image"></p><h2 id="文件上传操作"><a href="#文件上传操作" class="headerlink" title="文件上传操作"></a>文件上传操作</h2><hr><blockquote><p>🎈在pom文件中添加下面的代码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;aliyun.sdk.oss&gt;3.10.2&lt;/aliyun.sdk.oss&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;$&#123;aliyun.sdk.oss&#125;&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>🎈本地存储的话 在yml中写明存储地方</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ali:</span><br><span class="line">  spring:</span><br><span class="line">    localhost: D:\Program Files\Project\Test-Project\TEST01\alioosdemo\ali-service\src\main\resources\upload</span><br></pre></td></tr></table></figure><blockquote><p>🎈在Controller层进行上传操作</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/api/common&quot;)</span><br><span class="line"></span><br><span class="line">public class CommonController &#123;</span><br><span class="line">    @Value(&quot;$&#123;ali.spring.localhost&#125;&quot;)</span><br><span class="line">    private  String path;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AliOssUtil aliOssUtil;</span><br><span class="line">    /**</span><br><span class="line">     * 文件上传</span><br><span class="line">     */</span><br><span class="line">    @PostMapping(&quot;upload&quot;)</span><br><span class="line">    public String Upload(MultipartFile file) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        //获取原始名</span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">        //截取 .png</span><br><span class="line">        String substring = originalFilename.substring(originalFilename.lastIndexOf(&quot;.&quot;));</span><br><span class="line">        //构造一个新名称  使用Hutool工具类</span><br><span class="line">        String filename = IdUtil.simpleUUID() + substring;</span><br><span class="line">//新建File对象 进行存储</span><br><span class="line">        File file1 = new File(filename);</span><br><span class="line">     try &#123;</span><br><span class="line">            file.transferTo(file1);</span><br><span class="line">         &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">         &#125;</span><br><span class="line">         return  &quot;上传成功&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件上传操作（OSS版）"><a href="#文件上传操作（OSS版）" class="headerlink" title="文件上传操作（OSS版）"></a>文件上传操作（OSS版）</h2><blockquote><p>🎈Oss存储 在yml中写明存储地方 <strong>access-key-id</strong>、 <strong>access-key-secret</strong>、<strong>bucket-name</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ali:</span><br><span class="line">  alioos:</span><br><span class="line">    endpoint: oss-cn-beijing.aliyuncs.com</span><br><span class="line">    access-key-id: ***********</span><br><span class="line">    access-key-secret: ***********</span><br><span class="line">    bucket-name: ***********</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用@ConfigurationProperties注解读取 properties的数据</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">*</span><br><span class="line">*@Component 表示将该类标识为Bean</span><br><span class="line">*@ConfigurationProperties(prefix = &quot;ali.alioos&quot;)用于绑定属性，其中prefix表示所绑定的属性的前缀。</span><br><span class="line">**/</span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;ali.alioos&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class AliOssProprtyies &#123;</span><br><span class="line">    private String endpoint;</span><br><span class="line">    private String accessKeyId;</span><br><span class="line">    private String accessKeySecret;</span><br><span class="line">    private String bucketName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置类，用于创建AliOssUtil对象</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class OssConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @ConditionalOnMissingBean</span><br><span class="line">    public AliOssUtil aliOssUtil(AliOssProprtyies aliOssProprtyies)&#123;</span><br><span class="line">        return  new AliOssUtil(aliOssProprtyies.getEndpoint(),</span><br><span class="line">                    aliOssProprtyies.getAccessKeyId(),</span><br><span class="line">                    aliOssProprtyies.getAccessKeySecret(),</span><br><span class="line">                aliOssProprtyies.getBucketName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>定义阿里云工具类</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@Slf4j</span><br><span class="line">public class AliOssUtil &#123;</span><br><span class="line"></span><br><span class="line">    private String endpoint;</span><br><span class="line">    private String accessKeyId;</span><br><span class="line">    private String accessKeySecret;</span><br><span class="line">    private String bucketName;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 文件上传</span><br><span class="line">     *</span><br><span class="line">     * @param bytes</span><br><span class="line">     * @param objectName</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public String upload(byte[] bytes, String objectName) &#123;</span><br><span class="line"></span><br><span class="line">        // 创建OSSClient实例。</span><br><span class="line">        OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // 创建PutObject请求。</span><br><span class="line">            ossClient.putObject(bucketName, objectName, new ByteArrayInputStream(bytes));</span><br><span class="line">        &#125; catch (OSSException oe) &#123;</span><br><span class="line">            System.out.println(&quot;Caught an OSSException, which means your request made it to OSS, &quot;</span><br><span class="line">                    + &quot;but was rejected with an error response for some reason.&quot;);</span><br><span class="line">            System.out.println(&quot;Error Message:&quot; + oe.getErrorMessage());</span><br><span class="line">            System.out.println(&quot;Error Code:&quot; + oe.getErrorCode());</span><br><span class="line">            System.out.println(&quot;Request ID:&quot; + oe.getRequestId());</span><br><span class="line">            System.out.println(&quot;Host ID:&quot; + oe.getHostId());</span><br><span class="line">        &#125; catch (ClientException ce) &#123;</span><br><span class="line">            System.out.println(&quot;Caught an ClientException, which means the client encountered &quot;</span><br><span class="line">                    + &quot;a serious internal problem while trying to communicate with OSS, &quot;</span><br><span class="line">                    + &quot;such as not being able to access the network.&quot;);</span><br><span class="line">            System.out.println(&quot;Error Message:&quot; + ce.getMessage());</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (ossClient != null) &#123;</span><br><span class="line">                ossClient.shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //文件访问路径规则 https://BucketName.Endpoint/ObjectName</span><br><span class="line">        StringBuilder stringBuilder = new StringBuilder(&quot;https://&quot;);</span><br><span class="line">        stringBuilder</span><br><span class="line">                .append(bucketName)</span><br><span class="line">                .append(&quot;.&quot;)</span><br><span class="line">                .append(endpoint)</span><br><span class="line">                .append(&quot;/&quot;)</span><br><span class="line">                .append(objectName);</span><br><span class="line"></span><br><span class="line">        log.info(&quot;文件上传到:&#123;&#125;&quot;, stringBuilder.toString());</span><br><span class="line"></span><br><span class="line">        return stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>自定义上传接口</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private AliOssUtil aliOssUtil;</span><br><span class="line">/**</span><br><span class="line"> * 文件上传</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@PostMapping(&quot;upload&quot;)</span><br><span class="line">public String Upload(MultipartFile file) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">    //获取原始名</span><br><span class="line">    String originalFilename = file.getOriginalFilename();</span><br><span class="line">    //截取 .png</span><br><span class="line">    String substring = originalFilename.substring(originalFilename.lastIndexOf(&quot;.&quot;));</span><br><span class="line">    //构造一个新名称</span><br><span class="line">    String filename = IdUtil.simpleUUID() + substring;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    aliOssUtil.upload(file.getBytes(), filename);</span><br><span class="line"></span><br><span class="line">    return  &quot;上传成功&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2024/07/16/pkIhzlR.png" alt="image-20240716233536204"></p><p><img src="https://s21.ax1x.com/2024/07/16/pkI4pOx.png" alt="阿里云banner图"></p><p><img src="https://s21.ax1x.com/2024/07/17/pkI4XHf.png" alt="img"></p><p><img src="https://s21.ax1x.com/2024/07/17/pkI5pCQ.png" alt="SrpingBoot"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【SpringBoot篇】阿里云OSS--文件存储</title>
      <link href="/posts/2024/2973527110.html"/>
      <url>/posts/2024/2973527110.html</url>
      
        <content type="html"><![CDATA[<h2 id="🌹什么是阿里云OSS"><a href="#🌹什么是阿里云OSS" class="headerlink" title="🌹什么是阿里云OSS"></a>🌹什么是阿里云OSS</h2><p>阿里云对象存储（Alibaba Cloud Object Storage Service，简称OSS）是阿里云提供的海量、安全、低成本、高可靠的云存储服务。用户可以通过简单的API接口在任何时间、任何地点上传和下载数据，适用于图像、音视频、文档、网站等各种类型的数据存储和分发场景。</p><h2 id="⭐阿里云OSS的优点"><a href="#⭐阿里云OSS的优点" class="headerlink" title="⭐阿里云OSS的优点"></a>⭐阿里云OSS的优点</h2><p><strong>高可靠性</strong>：OSS采用了多副本存储和容灾备份机制，确保数据的高可靠性和持久性。<br><strong>安全性</strong>：支持多种安全策略，如访问控制、加密传输等，保障数据的安全性。<br><strong>弹性扩展</strong>：支持按需存储和弹性扩展，用户可以根据实际需求灵活调整存储容量。<br><strong>低成本</strong>：OSS的存储费用低廉，且支持按量付费模式，使用户能够根据实际使用量付费</p><h2 id="🏳️‍🌈为什么要使用云服务OSS"><a href="#🏳️‍🌈为什么要使用云服务OSS" class="headerlink" title="🏳️‍🌈为什么要使用云服务OSS"></a>🏳️‍🌈为什么要使用云服务OSS</h2><p>解决本地存储无法直接访问，本地磁盘空间有限，本地磁盘损坏这3个问题</p><h2 id="🎄使用步骤"><a href="#🎄使用步骤" class="headerlink" title="🎄使用步骤"></a>🎄使用步骤</h2><p><img src="https://s21.ax1x.com/2024/07/16/pkI2Fu8.png" alt="image-20240716215007220"></p><h2 id="文件上传操作"><a href="#文件上传操作" class="headerlink" title="文件上传操作"></a>文件上传操作</h2><hr><blockquote><p>🎈在pom文件中添加下面的代码</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aliyun.sdk.oss</span>&gt;</span>3.10.2<span class="tag">&lt;/<span class="name">aliyun.sdk.oss</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun.sdk.oss&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>🎈本地存储的话 在yml中写明存储地方</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ali:</span></span><br><span class="line">  <span class="attr">spring:</span></span><br><span class="line">    <span class="attr">localhost:</span> <span class="string">D:\Program</span> <span class="string">Files\Project\Test-Project\TEST01\alioosdemo\ali-service\src\main\resources\upload</span></span><br></pre></td></tr></table></figure><blockquote><p>🎈在Controller层进行上传操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/common&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ali.spring.localhost&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span>  String path;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliOssUtil aliOssUtil;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取原始名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="comment">//截取 .png</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">//构造一个新名称  使用Hutool工具类</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> IdUtil.simpleUUID() + substring;</span><br><span class="line"><span class="comment">//新建File对象 进行存储</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(file1);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span>  <span class="string">&quot;上传成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件上传操作（OSS版）"><a href="#文件上传操作（OSS版）" class="headerlink" title="文件上传操作（OSS版）"></a>文件上传操作（OSS版）</h2><blockquote><p>🎈Oss存储 在yml中写明存储地方 <strong>access-key-id</strong>、 <strong>access-key-secret</strong>、<strong>bucket-name</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ali:</span></span><br><span class="line">  <span class="attr">alioos:</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">oss-cn-beijing.aliyuncs.com</span></span><br><span class="line">    <span class="attr">access-key-id:</span> <span class="string">***********</span></span><br><span class="line">    <span class="attr">access-key-secret:</span> <span class="string">***********</span></span><br><span class="line">    <span class="attr">bucket-name:</span> <span class="string">***********</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用@ConfigurationProperties注解读取 properties的数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Component</span> 表示将该类标识为Bean</span></span><br><span class="line"><span class="comment">*<span class="doctag">@ConfigurationProperties</span>(prefix = &quot;ali.alioos&quot;)用于绑定属性，其中prefix表示所绑定的属性的前缀。</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;ali.alioos&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOssProprtyies</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置类，用于创建AliOssUtil对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> AliOssUtil <span class="title function_">aliOssUtil</span><span class="params">(AliOssProprtyies aliOssProprtyies)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">AliOssUtil</span>(aliOssProprtyies.getEndpoint(),</span><br><span class="line">                    aliOssProprtyies.getAccessKeyId(),</span><br><span class="line">                    aliOssProprtyies.getAccessKeySecret(),</span><br><span class="line">                aliOssProprtyies.getBucketName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>定义阿里云工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOssUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="type">byte</span>[] bytes, String objectName)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建PutObject请求。</span></span><br><span class="line">            ossClient.putObject(bucketName, objectName, <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OSSException oe) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught an OSSException, which means your request made it to OSS, &quot;</span></span><br><span class="line">                    + <span class="string">&quot;but was rejected with an error response for some reason.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Message:&quot;</span> + oe.getErrorMessage());</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Code:&quot;</span> + oe.getErrorCode());</span><br><span class="line">            System.out.println(<span class="string">&quot;Request ID:&quot;</span> + oe.getRequestId());</span><br><span class="line">            System.out.println(<span class="string">&quot;Host ID:&quot;</span> + oe.getHostId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException ce) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught an ClientException, which means the client encountered &quot;</span></span><br><span class="line">                    + <span class="string">&quot;a serious internal problem while trying to communicate with OSS, &quot;</span></span><br><span class="line">                    + <span class="string">&quot;such as not being able to access the network.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Message:&quot;</span> + ce.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ossClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                ossClient.shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件访问路径规则 https://BucketName.Endpoint/ObjectName</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;https://&quot;</span>);</span><br><span class="line">        stringBuilder</span><br><span class="line">                .append(bucketName)</span><br><span class="line">                .append(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">                .append(endpoint)</span><br><span class="line">                .append(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">                .append(objectName);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;文件上传到:&#123;&#125;&quot;</span>, stringBuilder.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>自定义上传接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AliOssUtil aliOssUtil;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">Upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取原始名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    <span class="comment">//截取 .png</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//构造一个新名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> IdUtil.simpleUUID() + substring;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    aliOssUtil.upload(file.getBytes(), filename);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  <span class="string">&quot;上传成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
